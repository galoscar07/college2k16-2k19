<html>

<head>

<title>Laborator 9</title>
</head>


<body>
<strong>Laborator 9 - programare multi-modul (asm+asm)</strong><br><br>

<strong>Subprograme in limbajul de asamblare</strong><br><br>

Limbajul de asamblare nu recunoaste notiunea de <em>subprogram</em>. Putem insa crea o secventa de instructiuni care sa poata fi apelata din alte zone ale programului si dupa terminarea ei sa returneze controlul programului apelant.<br><br>

Apelul unei "proceduri" se poate face cu o instructiune <em>jmp</em>. Problema este insa ca procesorul nu tine minte de unde a fost trimis la "procedura" si prin urmare nu stie unde sa revina la terminarea procedurii. Este necesar deci ca la apelul unei proceduri sa salvam undeva adresa de revenire, iar revenirea din procedura este de fapt o instructiune de salt la acea adresa.<br><br>

Locul unde se salveaza adresa de revenire este asa-zisa <em>stiva de executie</em>. Este nevoie de o stiva deoarece o procedura poate apela o alta procedura, acea procedura poate apela alta, s.a.m.d.<br><br>

Exista doua instructiuni: <em>call</em> si <em>ret</em>.<br><br>

Instructiunea <em>call</em>, avand sintaxa<br><br>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>call eticheta</em><br><br>

este de fapt o instructiune <em>jmp</em> care in plus introduce in varful stivei adresa instructiunii care urmeaza (adica cea care vine imediat dupa <em>call</em>, si nu destinatia saltului produs de instructiunea <em>call</em>).<br><br>

Instructiunea <em>ret</em> extrage din varful stivei o adresa si executa un salt la acea adresa. Instructiunea nu are argumente deoarece adresa la care sare este extrasa din varful stivei (nu este data explicit).<br><br>

De notat ca subprogramele nu au variabile locale sau etichete locale. Toate numele sunt vizibile in intregul program, prin urmare trebuie sa avem grija sa nu existe etichete cu acelasi nume in programul principal si in subprograme.<br><br><br>

<strong>Programe din mai multe module</strong><br><br>

Un program scris in limbaj de asamblare poate fi impartit in mai multe fisiere sursa. Pentru a scrie un program din mai multe fisiere sursa trebuie sa respectam urmatoarele:

<ul>
<li>Toate segmentele vor fi declarate cu modificatorul <em>public</em>, pentru ca in programul final segmentul de cod este construit din concatenarea segmentelor de cod din fiecare modul; la fel si segmentul de date.</li>
<li>Etichetele si numele variabilelor dintr-un modul care se cere sa fie vizibile din alte module trebuie sa faca obiectul unor declaratii <em>public</em></li>
<li>Etichetele si variabilele care sunt declarate intr-un modul si sunt folosite in alt modul trebuie sa fie "importate" prin directiva <em>extrn</em></li>
<li>O variabila trebuie declarata in intregime intr-un modul (nu poate fi jumatate intr-un modul si jumatate intr-altul). De asemenea, trecerea executiei dintr-un modul in altul se poate face doar prin instructiuni de salt (<em>jmp</em>, <em>call</em> sau <em>ret</em>).</li>
<li>Punctul de intrare este prezent doar in modulul ce contine "programul principal"</li>
</ul>

Fiecare modul se va asambla separat (cu comanda <em>tasm</em>), apoi modulele se vor lega impreuna cu comanda<br><br>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>tlink /v modul_1 modul_2 ... modul_n</em><br><br>

executabilul rezultat avand numele primului modul.<br><br>
</body>

</html>
