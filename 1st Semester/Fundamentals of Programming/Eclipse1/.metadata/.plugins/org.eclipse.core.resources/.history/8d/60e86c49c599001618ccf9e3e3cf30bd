'''
Created on Oct 18, 2016

@author: oscar
'''
#-------------------------------------Domain------------------------------------------------------------------------------

def createApartment(number,type,amount):
    """
    Resume: This function will create a dictionary.
    Arguments: The 3 arguments are the one that will be put into a dictionary, representing the apartment number, type and amount.
    Return: The function will return a dictionary whit 3 elements.
    """
    return{"number":number,"type":type,"amount":amount}

def addApartmentInOrder(building,apartment):
    """
    Resume: This function will insert in the list with dictionary, the dictionary apartment in it's right place. If in the list is no apartment then the dictionary 
            will be pun on the first element of the list, otherwise the function will search for it's place, if there are 2 apartments dictionary with the same 
            specification a message will be displayed.
    Arguments: The function have 2 arguments, building which is the list where we will insert a dictionary, and apartment which is the dictionary
    Return: The function will return the list modified
    """
    if len(building) == 0:
        building.append(apartment)    
    else:
        i = 0
        while i < len(building) and building[i]["number"] <= apartment["number"]:
            i += 1
        if i == len(building):
            building.append(apartment)
        else:
            building.insert(i,apartment)
            
def addSortInOrderByAmount(building,apsort):
    """
    """
    if len(building) == 0:
        building.append(apsort)    
    else:
        i = 0
        while i < len(building) and building[i]["amount"] <= apsort["amount"]:
            i += 1
        if i == len(building) and building[i-1]["number"] != apsort["number"]:
            building.append(apsort)
        else:
            if building[i-1]["number"] != apsort["number"]:
                building.insert(i,apsort)
                
def addSortInOrderByType(building,apsort):
    """
    """
    if len(building) == 0:
        building.append(apsort)    
    else:
        i = 0
        while i < len(building) and building[i]["amount"] <= apsort["amount"]:
            i += 1
        if i == len(building) and building[i-1]["type"] != apsort["type"]:
            building.append(apsort)
        else:
            if building[i-1]["type"] != apsort["type"]:
                building.insert(i,apsort)

def getApartmentNr(apartment):
    """
    Resume: The function will return the value of the key number from the apartment dictionary.
    Argument: Apartment is the dictionary from which we will return the value of number key.
    Return: The value of number key.
    """
    return apartment["number"]

def getApartmentType(apartment):
    """
    Resume: The function will return the value of the key type from the apartment dictionary.
    Arguments: Apartment is the dictionary from which we will return the value of type key.
    Return: The value of type key.
    """
    return apartment["type"]

def getApartmentAmount(apartment):
    """
    Resume: The function will return the value of the key amount from the apartment dictionary.
    Arguments: Apartment is the dictionary from which we will return the value of amount key.
    Return: The value of amount key.
    """
    return apartment["amount"]

def isValueThere(building, number, typ):
    """
    Resume: The function will return the position of the element in list building, which have at key number the value, value1 and at key type the value, value2.
    Arguments: Building is the list in which we will search, number and type are the key we are searching for which need to have the value value1 and value2.
    Return: False if such an element doesn't exist and i which is the position of the element we are looking for.
    """
    for dict in building:
        if dict["number"] == number  and dict["type"] == typ:
            return True
    return False

def deleteApartmentNr(building,number):
    """
    Resume: The function will delete all the apartments with the number number from the list building.
    Arguments: Building represent the list in which we will delete the apartments, and number is the apartment which will be deleted.
    Return: The function will return the list with the apartments with the number deleted.
    """
    building[:] = [s for s in building if getApartmentNr(s) != number]
    
def deleteApartmentsFromTo(building,start,end):
    """
    Resume: The function will delete the apartments from number i to j in the list building.
    Arguments: Building is the list in which we will delete the apartments, i,j are the numbers between which we will delete apartments.
    Return: The function will return the list with the apartments between i,j deleted.
    """
    for s in range(start,end+1):
        deleteApartmentNr(building, s)

def deleteApartmentType(building,type):
    """
    Resume: The function will delete the apartments which have as expense type.
    Arguments: Building is the list in which we will remove elements which have at the key "type", the type value.
    Return: The function will return the list buildings without elements that have at expenses the value type.
    """
    building[:] = [s for s in building if getApartmentType(s) != type ]

def replaceApartmentValue(building, apartmentnr, typenr, value):
    """
    Resume: The function will replace the value of the element situated in buildings with number key = apartmentnr and type key = typenr with value.
    Arguments: Building is the list in which we will modify, apartmentnr is the number, typenr is the type and value is the value that is supposed to replace the old value.
    Return:The function will return the list modified. 
    """
    try:
        for i in range(0,len(building)+1):
            if getApartmentNr(building[i]) == apartmentnr and getApartmentType(building[i]) == typenr:
                building[i] = {"number":apartmentnr,"type":typenr,"amount":value}
                break
    except IndexError as ie:
        print("There is no apartment ",apartmentnr," with expense ",typenr)

def listGSE(building,params):
    """
    """
    try:
        c = int(params[1])
        d = 0
        if params[0] == "=":
            for apartment in building:
                if getApartmentAmount(apartment) == c:
                    uiPrintApartment(apartment)
                    d = 1 
        elif params[0] == ">":
            for apartment in building:
                if getApartmentAmount(apartment) > c:
                    uiPrintApartment(apartment)
                    d = 1
        elif params[0] == "<":
            for apartment in building:
                if getApartmentAmount(apartment) < c:
                    uiPrintApartment(apartment)
                    d = 1
        else:
            print("Invalid Input")
        if d == 0:
            print("There is no such an element to be listed. ")
    except ValueError as ve:
        print("Invalid input: ", ve)

def sumType(building,type):
    """
    """
    s = 0
    c = 0
    for apartment in building:
        if getApartmentType(apartment) == type:
            s = s + getApartmentAmount(apartment)
            c = 1
    return (s,c)

def findMaxAmount(building, number, type):
    """
    """
    max = 0
    for apartment in building:
        if getApartmentNr(apartment) == number and getApartmentType(apartment) == type:
            if getApartmentAmount(apartment) > max:
                max = getApartmentAmount(apartment)
    return {"number":number,"type":type,"amount":max}

def listOfApartmentExpenses(number,building):
    """
    """
    exp = []
    for apartment in building:
        if getApartmentNr(apartment) == number:
            if not( getApartmentType(apartment) in exp):
                exp.append(getApartmentType(apartment))
    return exp
                
def maxValueApartment(building,number):
    """
    """
    exp = listOfApartmentExpenses(number, building)
    if exp == []:
        print("there is no such apartment like your request")
    else:
        for i in exp:
            c = findMaxAmount(building, number, i)
            if c != 0:
                print (c)
                
def filterApartmentByAmount(building, number):
    return list(filter(lambda s: getApartmentAmount(s) < number, building))

def filterApartmentByType(building, type):
    return list(filter(lambda s: getApartmentType(s) == type, building))

def totalAmountPerApartment(building,number):
    """
    """
    s = 0
    for apartment in building:
        if getApartmentNr(apartment) == number:
            s = s + getApartmentAmount(apartment)
        elif getApartmentNr(apartment) > number:
            break
    return s

def allTypeSort(building):
    """
    """
    exp = []
    for apartment in building:
        exp1 = listOfApartmentExpenses(getApartmentNr(apartment), building)
        for i in exp1:
            if not(i in exp):
                exp.append(i)
    return exp

def totalAmountPerApartmentType(building,type):
    """
    """
    s = 0
    for apartment in building:
        if getApartmentType(apartment) == type:
            s = s + getApartmentAmount(apartment)
    return s  
  
def sortApartmentByNumber(building):
    """
    """
    sortlist = []
    for apartment in building:
        s = totalAmountPerApartment(building, getApartmentNr(apartment))
        addSortInOrderByAmount(sortlist, createApartment(getApartmentNr(apartment), "none", s))
    return sortlist

def sortApartmentByType(building):
    """
    """
    sortlist = []
    exp = allTypeSort(building)
    for i in exp:
        s = totalAmountPerApartmentType(building, i)
        addSortInOrderByType(sortlist, createApartment(0, i, s))
    return sortlist

#--------------------------------------------------------------------User Interface-------------------------------------------------------------------------------------------------------------------------------------------------

def readCommand():
    """
    Resume: Read and parse user commands
    Arguments: There is no arguments.
    Return: (command, params) tuple, where, command is user command and params are parameters
    """
    cmd = input("Command: ")
    cmd = cmd.split(" ")
    command = cmd[0]
    params = cmd[1:]
    return (command, params)
    
def runApp():
    """
    Resume: The function will run the principle menu, it will read a command from keyboard and decide to which use interface function to send, or it will break 
            the and stop the program, at the same time it will announce you if you typed wrong something.
    Arguments: There is no arguments.
    Return: It will not return nothing because it will send you to another functions, or it will break if you hit the X key.
    """
    building = startUp()
    while True:
        (command,params) = readCommand()
        if command == "add":
            uiAddApartment(building,params)
        elif command == "remove":
            uiRemoveApartment(building,params)
        elif command == "replace":
            uiReplaceApartment(building,params)
        elif command == "list" and params == []:
            uiListAll(building)
        elif command == "list" and params != []:
            uiListMenu(building,params)
        elif command == "sum":
            uiSumType(building, params)
        elif command == "max":
            uiMax(building, params)
        elif command == "filter":
            uiFilter(building,params)
        elif command == "sort":
            uiSort(building,params)
        elif command == "undo":
            uiUndo(building,params)
        elif command == "help":
            uiPrintHelp()
        elif command == "exit":
            break
        else:
            print("You are so gay, Oscar. Input a proper command, fag.")
            
def uiPrintHelp():
    """
    Resume: The function will print all commands that can be given to the program
    """
    print("Valid commands: ")
    print("\t 1. add <apartment> <type> <amount>") 
    print("\t 2. remove <apartment>") 
    print("\t 3. remove <type>")
    print("\t 4. remove <start apartment> to <end apartment>") 
    print("\t 5. replace <apartment> <type> with <amount>") 
    print("\t 6. list")
    print("\t 7. list <apartment>")
    print("\t 8. list [ < | = | > ] <amount>")
    print("\t 9. sum <type>")
    print("\t 10. max <apartment> ")
    print("\t 11. sort <apartment> ")
    print("\t 12. sort <type>")
    print("\t 13. filter <type>")
    print("\t 14. filter <amount>")
    print("\t 15. undo")
    print("\t 16. help")
    print("\t 17. exit")

def uiAddApartment(building,params):
    """
    Resume: The function will insert into the list an apartment read from the keyboard.
    Arguments: Building is the list which will be modified.
    Return: It will return the list modified.
    """
    if len(params) < 3:
        print("Invalid input. Apartment was not added")
        return
    try:
        number = int(params[0])
        type = params[1]
        amount = int(params[2])
        apartment = createApartment(number, type, amount) 
        addApartmentInOrder(building, apartment)
    except ValueError as ve:
        print("Invalid input: ",ve)
    except KeyError as ke:
        print("Option is not yet implemented: ",ke)
    
def uiRemoveApartment(building,params):
    """
    """
    try:
        if len(params) >= 2:
            start = int(params[0])
            end = int(params[2])
            deleteApartmentsFromTo(building, start, end)
        else: 
            int(params[0])
            number = int(params[0])
            deleteApartmentNr(building, number)
    except ValueError:
        deleteApartmentType(building, params[0])

def uiReplaceApartment(building,params):
    """
    Resume: The function will modify the amount of a type in a specific apartment.
    Argument: Building is the list which will be modified.
    Return: The function will return the list modified.
    """
    try:
        apartmentnr = int(params[0])
        typenr = params[1]
        value = int(params[3])
        replaceApartmentValue(building, apartmentnr, typenr, value)
    except KeyError as ke:
        print("Option not yet implemented: ",ke)
    except IndexError as ie:
        print("Invalid input, you need to have at least 3 parameters at the command: ",ie)
    except ValueError as ve:
        print("Invalid input: ",ve)
        
def uiPrintApartment(apartment):
    """
    Resume: The function will print a dictionary with a specific from.
    Argument: Apartment is a dictionary which is going to be print.
    Return: It will return nothing.
    """
    print("( Apartment Number = {0}, Type = {1}, Amount = {2} )".format(apartment["number"], apartment["type"], apartment["amount"]), end="\n")
        
def uiListAll(building):
    """
    Resume: The function is going to print the list building with the specific form of the previous function, if the list is empty, the program is going
            to print a message.
    Argument: Building is the list which is going to be printed.
    Return: The function will return a message if the list is empty.
    """
    if len(building) == 0:
        print("The list is empty.")
    else:
        for apartment in building:    
            uiPrintApartment(apartment)
                               
def uiListMenu(building,params):
    try:
        if len(params) == 1:
            for apartment in building:
                if getApartmentNr(apartment) == int(params[0]):
                    uiPrintApartment(apartment)
        elif len(params) == 2:
            listGSE(building, params)
    except ValueError as ve:
        print("Invalid Input: ",ve)
    except KeyError as ke:
        print("Invalid Input: ",ke)
            
def uiSumType(building,params):
    """
    Resume: The function will return the sum of the elements that have at key type a value read from keyboard 
    Argument: building is the list in which we search for elements that have as key type the value read from the keyboard
              which is saved in params list
    Return: The list building modified
    """
    try:
        type = params[0]
        sum,c = sumType(building, type)
        if c == 0 :
            print("There is no apartment with the type: ",type," in the apartments list.")
        else:
            print("The sum of the apartments with type: ",type," is ",sum)
    except ValueError as ve:
        print("Invalid input: ",ve)

def uiMax(building,params):
    """
    """
    try:
        number = int(params[0])
        maxValueApartment(building, number)
    except ValueError as ve:
        print("Invalid Input: ",ve)
    except IndexError as ie:
        print("Invalid Input: ",ie)
        
def uiSort(building, params):
    """
    """
    if params[0] == "apartment":
        listsort = sortApartmentByNumber(building)
        if len(listsort) == 0:
            print("The list is empty.")
        else:   
            for apartment in listsort:    
                print("( Apartment Number = {0}, Amount = {2} )".format(apartment["number"], apartment["type"], apartment["amount"]), end="\n")
    elif params[0] == "type":
        listsort = sortApartmentByType(building)
        if len(listsort) == 0:
            print("The list is empty.")
        else:   
            for apartment in listsort:    
                print("( Type = {1}, Amount = {2} )".format(apartment["number"], apartment["type"], apartment["amount"]), end="\n")
    else:
        print("Invalid input, no sort was done.")
        
def uiUndo(building,params):
    pass
        
def uiFilter(building,params):
    """
    """
    try:
        number = int(params[0])
        print(uiListAll(filterApartmentByAmount(building, number)))
    except ValueError as ve:
        print(uiListAll(filterApartmentByType(building, params[0])))
    except IndexError as ie:
        print("Invalid Input: ",ie)
            
#-----------------------------------------------------------Test-----------------------------------------------------------------------------------

def startUp():
    """
    Resume: The function is setting up the list building. The purpose for that is to have items for testing the program.
    Arguments: There is no argument.
    Return: Returns a list of dictionaries.  
    """
    building = []
    building.append(createApartment(1, "gas", 100))
    building.append(createApartment(1, "gas", 200))
    building.append(createApartment(1, "gas", 150))
    building.append(createApartment(1, "electricity", 300))
    building.append(createApartment(1, "electricity", 98))
    building.append(createApartment(1, "electricity", 110))
    building.append(createApartment(1, "electricity", 160))
    building.append(createApartment(1, "water", 180))
    building.append(createApartment(1, "water", 300))
    building.append(createApartment(1, "water", 1000))
    building.append(createApartment(1, "water", 1400))
    building.append(createApartment(8, "gas", 800))
    building.append(createApartment(9, "heating", 60))
    building.append(createApartment(10, "gas", 300))
    building.append(createApartment(11, "water", 200))
    building.append(createApartment(12, "gas", 10))
    building.append(createApartment(13, "water", 9))  
    building.append(createApartment(14, "heating", 2))
    return building

def testaddApartmentInOrder():
    b = startUp()
    assert(len(b) == 18)
    ap = createApartment(15, "gas", 500)
    addApartmentInOrder(b, ap)
    assert(len(b) == 19)
    
def testdeleteApartmentNr():
    b = startUp()
    assert(len(b) == 18)
    deleteApartmentNr(b, 14)
    assert(len(b)) == 17
    
def testdeleteApartmentsFromTo():
    b = startUp()
    assert(len(b) == 18)
    deleteApartmentsFromTo(b, 10, 12)
    assert(len(b) == 15)
    
def testdeleteApartmentType():
    b = startUp()
    assert(len(b) == 18)
    deleteApartmentType(b, "gas")
    assert(len(b) == 12)
    
def testreplaceApartmentValue():
    b = startUp()
    assert(len(b) == 18)
    replaceApartmentValue(b, 13, "water", 200)
    assert(b[16]["amount"] == 200)

def testAll():
    testaddApartmentInOrder()
    testdeleteApartmentNr()
    testdeleteApartmentsFromTo()
    testdeleteApartmentType()
    testreplaceApartmentValue()
#-----------------------------------------------------------Main-----------------------------------------------------------------------------------


if __name__ == '__main__':
    print("Hello World!")
    testAll()
    runApp()
    print("Bye Bye!")
    pass